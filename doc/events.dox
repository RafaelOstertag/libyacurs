// -*- c++ -*-
/**
 * @page events Events
 *
 * @section uxsignal Unix Signals
 *
 * Following a tbale of Unix Signals and their corresponding events:
 *
 * Unix Signal | Event
 * ------------|------
 * @c SIGWINCH | see @ref termresize "Terminal Resize"
 * @c SIGALRM  | @c EVT_SIGALRM
 * @c SIGUSR1  | @c EVT_SIGUSR1
 * @c SIGUSR2  | @c EVT_SIGUSR2
 * @c SIGINT   | @c EVT_SIGINT
 * @c SIGTERM  | @c EVT_SIGTERM
 * @c SIGQUIT  | @c EVT_SIGQUIT
 * @c SIGCONT  | @c EVT_SIGCONT
 * @c SIGTSTP  | @c EVT_SIGTSTP
 *
 *
 * @section refreshevt Refresh Events
 *
 * @c EVT_REFRESH is usually emitted after a resize. The refresh must
 * not be immediate.
 *
 * @c EVT_FORCEREFRESH instruct Windows and Widgets to force their
 * refresh
 *
 *  
 *
 * @section termresize Terminal Resize
 *
 * If supported by the underlying Curses implementation, a Terminal
 * Resize emits following events:
 *
 * 1. @c EVT_TERMRESETUP
 * 2. @c EVT_SIGWINCH
 * 3. @c EVT_REFRESH
 * 4. @c EVT_DOUPDATE
 *
 * @c EVT_TERMRESETUP is connected and handled by Curses.
 *
 * @c EVT_SIGWINCH should only be connected by derived classes of
 * WindowBase. Classes derived from WidgetBase must not connect to
 * that Event in order to resize, but rely on the parent Window
 * calling resize().
 *
 * All visible objects should connect @c EVT_REFRESH. @c EVT_REFRESH
 * advises the object to prepare for a Curses doupdate(), i.e. they
 * should call @c this->refresh(false).
 *
 * A Terminal Resize will always result in objects being first
 * unrealized() and then realized() again.
 *
 * @section Window Events
 *
 * Upon showing a window by calling @c WindowBase->show(), @c
 * EVT_WINDOW_SHOW will be emitted. When a window is closed by a call
 * to @c WindowBase->close(), @c EVT_WINDOW_CLOSE will be emitted.
 * Both events are of type @c EventEx<WindowBase*>, and provide the
 * memory address of the originating window as event data.
 */
